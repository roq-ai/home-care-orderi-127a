generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model item {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @db.VarChar(255)
  type       String       @db.VarChar(255)
  quantity   Int
  price      Int
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  order_item order_item[]
}

model order {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status        String       @db.VarChar(255)
  order_date    DateTime     @db.Date
  delivery_date DateTime     @db.Date
  resident_id   String       @db.Uuid
  user_id       String       @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
  resident      resident     @relation(fields: [resident_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_item    order_item[]
}

model order_item {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id   String   @db.Uuid
  item_id    String   @db.Uuid
  quantity   Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  item       item     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order      order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  address     String?    @db.VarChar(255)
  city        String?    @db.VarChar(255)
  state       String?    @db.VarChar(255)
  zip_code    String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resident    resident[]
}

model resident {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name        String       @db.VarChar(255)
  last_name         String       @db.VarChar(255)
  date_of_birth     DateTime     @db.Date
  gender            String       @db.VarChar(255)
  medical_condition String       @db.VarChar(255)
  organization_id   String       @db.Uuid
  created_at        DateTime     @default(now()) @db.Timestamp(6)
  updated_at        DateTime     @default(now()) @db.Timestamp(6)
  order             order[]
  organization      organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  order        order[]
  organization organization[]
}
